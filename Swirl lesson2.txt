
| Create a directory in the current working directory called "testdir".

> exit
Error: object 'exit' not found
> exit()
Error: could not find function "exit"
> mkdir(testdir)
Error: could not find function "mkdir"
> ?help
> ls()
[1] "my_div"  "my_sqrt" "old.dir" "x"       "y"       "z"      

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type info() for
| more options.

| Type dir.create("testdir") to create a directory in the current working directory called
| "testdir".

> dir.create("testdir")

| You're the best!

  |===================                     |  46%

| We will do all our work in this new directory and then delete it after we are done. This
| is the R analog to "Take only pictures, leave only footprints."

...

  |====================                    |  49%

| Set your working directory to "testdir".

> cd testdir
Error: unexpected symbol in "cd testdir"
> ls()
[1] "my_div"  "my_sqrt" "old.dir" "x"       "y"       "z"      

| Try again. Getting it right on the first try is boring anyway! Or, type info() for more
| options.

| Use setwd("testdir") to set your working directory to "testdir".

> setwd("testdir")

| Excellent job!

  |====================                    |  51%

| In general, you will want your working directory to be someplace sensible, perhaps created
| for the specific project that you are working on. In fact, organizing your work in R
| packages using R Studio is an excellent option. But those topics are beyond the scope of
| this lesson.

...

  |=====================                   |  54%

| Create a file in your working directory called "mytest.R".

> ls()
[1] "my_div"  "my_sqrt" "old.dir" "x"       "y"       "z"      

| That's not exactly what I'm looking for. Try again. Or, type info() for more options.

| file.create("mytest.R") will get the job done!

> file.create("mytest.R")
[1] TRUE

| You're the best!

  |======================                  |  56%

| This should be the only file in this newly created directory. Issue the R command (which we
| have already covered) that will show this.

> ls()
[1] "my_div"  "my_sqrt" "old.dir" "x"       "y"       "z"      

| Keep trying! Or, type info() for more options.

| list.files() shows that the directory only contains mytest.R.

> list files()
Error: unexpected symbol in "list files"
> list.files()
[1] "mytest.R"

| Keep up the great work!

  |=======================                 |  59%

| Check to see if "mytest.R" exists in the working directory

> ls()
[1] "my_div"  "my_sqrt" "old.dir" "x"       "y"       "z"      

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type info() for more
| options.

| Use file.exists("mytest.R") to check that a file exists.

> file.exists("mytest.R")
[1] TRUE

| Great job!

  |========================                |  61%

| These sorts of functions are excessive for interactive use. But, if you are running a
| program that loops through a series of files and does some processing on each one, you will
| want to check to see that each exists before you try to process it.

...

  |=========================               |  63%

| Access information about the file "mytest.R". That is, what command, along with the
| appropriate argument, will return information about the file "mytest.R"?

> ls()
[1] "my_div"  "my_sqrt" "old.dir" "x"       "y"       "z"      

| Not quite! Try again. Or, type info() for more options.

| file.info("mytest.R") will do the trick!

> file.info("mytest.R")
         size isdir mode               mtime               ctime               atime  uid
mytest.R    0 FALSE  664 2015-02-12 13:01:13 2015-02-12 13:01:13 2015-02-12 13:01:13 1000
          gid uname grname
mytest.R 1000   tim    tim

| You got it!

  |==========================              |  66%

| You can use the $ operator --- e.g., file.info("mytest.R")$mode --- to grab specific items.

...

  |===========================             |  68%

| Change the name of the file "mytest.R" to "mytest2.R".

> ls()
[1] "my_div"  "my_sqrt" "old.dir" "x"       "y"       "z"      

| Keep trying! Or, type info() for more options.

| file.rename("mytest.R", "mytest2.R") is the answer. Again, Googling using key words from
| the question, along with the letter R, will often give you a good hint.

> file.rename("mytest.R", "mytest2.R")
[1] TRUE

| That's the answer I was looking for.

  |============================            |  71%

| Your operating system will provide simpler tools for these sorts of tasks. But having the
| ability to manipulate files programatically is useful. You might now try to delete mytest.R
| using file.remove("mytest.R"), but that won't work since mytest.R no longer exists. You
| have already renamed it.

...

  |=============================           |  73%

| Make a copy of "mytest2.R" called "mytest3.R".

> mytest3.R <- mytest2.R
Error: object 'mytest2.R' not found
> mytest2.R <- mytest3.R
Error: object 'mytest3.R' not found
> ls()
[1] "my_div"  "my_sqrt" "old.dir" "x"       "y"       "z"      

| You almost had it, but not quite. Try again. Or, type info() for more options.

| file.copy("mytest2.R", "mytest3.R") works.

> file.copy("mytest2.R", "mytest3.R")
[1] TRUE

| All that practice is paying off!

  |==============================          |  76%

| You now have two files in the current directory. That may not seem very interesting. But
| what if you were working with dozens, or millions, of individual files? In that case, being
| able to programatically act on many files would be absolutely necessary. Don't forget that
| you can, temporarily, leave the lesson by typing play() and then return by typing nxt().

...

  |===============================         |  78%

| Provide the full path to the file "mytest3.R".

> file.path("mytest3.R")
[1] "mytest3.R"

| You are amazing!

  |================================        |  80%

| Create a directory in the current working directory called "testdir2" and a subdirectory
| for it called "testdir3", all in one command.

> ls()
[1] "my_div"  "my_sqrt" "old.dir" "x"       "y"       "z"      

| Try again. Getting it right on the first try is boring anyway! Or, type info() for more
| options.

| dir.create("testdir2/testdir3", recursive = TRUE) works. If you forgot the recursive
| argument, the command may have appeared to work. Why?

> dir.create("testdir2/testdir3", recursive = TRUE)

| That's the answer I was looking for.

  |=================================       |  83%

| Delete the "testdir2" directory that you created.

> file.remove("testdir2")
[1] FALSE
Warning message:
In file.remove("testdir2") :
  cannot remove file 'testdir2', reason 'Directory not empty'

| Nice try, but that's not exactly what I was hoping for. Try again. Or, type info() for more
| options.

| unlink("testdir2", recursive = TRUE) works.

> ls()
[1] "my_div"  "my_sqrt" "old.dir" "x"       "y"       "z"      

| Give it another try. Or, type info() for more options.

| unlink("testdir2", recursive = TRUE) works.

> unlink("testdir2", recursive = TRUE)

| That's a job well done!

  |==================================      |  85%

| Again, you need the recursive = TRUE argument. Otherwise, R is concerned that you are
| unaware that, when deleting testdir2, you are also deleting testdir3, which is nested
| within it. R reasons that, if you don't tell it that recursive equals TRUE, you don't know
| that something is in testdir2. So, it tries to prevent you from making a mistake.

...

  |===================================     |  88%

| Why is this command named "unlink" rather than something more sensible like "dir.delete" or
| "dir.remove"? Mainly, history. unlink is the traditional Unix command for removing
| directories.

...

  |====================================    |  90%

| Go back to your original working directory. (Recall that we created the variable old.dir
| with the full path for the orginal working directory at the start of these questions.)

> ls()
[1] "my_div"  "my_sqrt" "old.dir" "x"       "y"       "z"      

| Not exactly. Give it another go. Or, type info() for more options.

| Use setwd(old.dir).

> setwd(old.dir)

| All that hard work is paying off!

  |=====================================   |  93%

| It is often help to save the settings that you had before you began an analysis and then go
| back to them at the end. This trick is often used within functions; you save, say, the
| par() settings that you started with, mess around a bunch, and then set them back to the
| original values at the end. This isn't the same as what we have done here, but it seems
| similar enough to mention.

...

  |======================================  |  95%

| Delete the "testdir" directory that you just left (and everything in it)

> unlink("testdir", recursive = TRUE)

| That's a job well done!

  |======================================= |  98%

| Take nothing but results. Leave nothing but assumptions. That sounds like "Take nothing but
| pictures. Leave nothing but footprints." But it makes no sense! Surely our readers can come
| up with a better motto . . .

...

  |========================================| 100%

| In this lesson, you learned how to examine your R workspace and work with the file system
| of your machine from within R.

...

| Are you currently enrolled in the Coursera course associated with this lesson?

1: Yes
2: No

Selection: Yes

| Would you like me to notify Coursera that you've completed this lesson? If so, I'll need to
| get some more info from you.

1: Yes
2: No
3: Maybe later

Selection: Yes

| The first item I need is your Course ID. For example, if the homepage for your Coursera
| course was 'https://class.coursera.org/rprog-001', then your course ID would be 'rprog-001'
| (without the quotes).

Course ID: SRT411
Submission login (email): tmalladin.myseneca.ca
Submission password: tcphsTMA

| Is the following information correct?

Course ID: SRT411
Submission login (email): tmalladin.myseneca.ca
Submission password: tcphsTMA

1: Yes, go ahead!
2: No, I need to change something.

Selection: 1

| I'll try to tell Coursera you've completed this lesson now.

| I'm sorry, something went wrong with establishing connection.

| Would you like to retry automatic submission or just submit manually?

1: Retry automatic submission
2: Submit manually

Selection: 2

| To notify Coursera that you have completed this lesson, please upload
| ‘SRT411_Workspace_and_Files.txt’ to Coursera manually. You may do so by visiting the
| Programming Assignments page on your course website and selecting the Submit button next to
| the appropriate swirl lesson. I've placed the file in the following directory:

/home/tim

...

| You've reached the end of this lesson! Returning to the main menu...

| Would you like to continue with one of these lessons?

